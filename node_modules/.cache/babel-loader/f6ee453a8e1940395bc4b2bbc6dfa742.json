{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.compilePattern = compilePattern;\nexports.matchPattern = matchPattern;\nexports.getParamNames = getParamNames;\nexports.getParams = getParams;\nexports.formatPattern = formatPattern;\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction _compilePattern(pattern) {\n  var regexpSource = '';\n  var paramNames = [];\n  var tokens = [];\n  var match = void 0,\n      lastIndex = 0,\n      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\\*\\*|\\*|\\(|\\)/g;\n\n  while (match = matcher.exec(pattern)) {\n    if (match.index !== lastIndex) {\n      tokens.push(pattern.slice(lastIndex, match.index));\n      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));\n    }\n\n    if (match[1]) {\n      regexpSource += '([^/]+)';\n      paramNames.push(match[1]);\n    } else if (match[0] === '**') {\n      regexpSource += '(.*)';\n      paramNames.push('splat');\n    } else if (match[0] === '*') {\n      regexpSource += '(.*?)';\n      paramNames.push('splat');\n    } else if (match[0] === '(') {\n      regexpSource += '(?:';\n    } else if (match[0] === ')') {\n      regexpSource += ')?';\n    }\n\n    tokens.push(match[0]);\n    lastIndex = matcher.lastIndex;\n  }\n\n  if (lastIndex !== pattern.length) {\n    tokens.push(pattern.slice(lastIndex, pattern.length));\n    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));\n  }\n\n  return {\n    pattern: pattern,\n    regexpSource: regexpSource,\n    paramNames: paramNames,\n    tokens: tokens\n  };\n}\n\nvar CompiledPatternsCache = Object.create(null);\n\nfunction compilePattern(pattern) {\n  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);\n  return CompiledPatternsCache[pattern];\n}\n/**\n * Attempts to match a pattern on the given pathname. Patterns may use\n * the following special characters:\n *\n * - :paramName     Matches a URL segment up to the next /, ?, or #. The\n *                  captured string is considered a \"param\"\n * - ()             Wraps a segment of the URL that is optional\n * - *              Consumes (non-greedy) all characters up to the next\n *                  character in the pattern, or to the end of the URL if\n *                  there is none\n * - **             Consumes (greedy) all characters up to the next character\n *                  in the pattern, or to the end of the URL if there is none\n *\n *  The function calls callback(error, matched) when finished.\n * The return value is an object with the following properties:\n *\n * - remainingPathname\n * - paramNames\n * - paramValues\n */\n\n\nfunction matchPattern(pattern, pathname) {\n  // Ensure pattern starts with leading slash for consistency with pathname.\n  if (pattern.charAt(0) !== '/') {\n    pattern = '/' + pattern;\n  }\n\n  var _compilePattern2 = compilePattern(pattern);\n\n  var regexpSource = _compilePattern2.regexpSource;\n  var paramNames = _compilePattern2.paramNames;\n  var tokens = _compilePattern2.tokens;\n\n  if (pattern.charAt(pattern.length - 1) !== '/') {\n    regexpSource += '/?'; // Allow optional path separator at end.\n  } // Special-case patterns like '*' for catch-all routes.\n\n\n  if (tokens[tokens.length - 1] === '*') {\n    regexpSource += '$';\n  }\n\n  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));\n\n  if (match == null) {\n    return null;\n  }\n\n  var matchedPath = match[0];\n  var remainingPathname = pathname.substr(matchedPath.length);\n\n  if (remainingPathname) {\n    // Require that the match ends at a path separator, if we didn't match\n    // the full path, so any remaining pathname is a new path segment.\n    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {\n      return null;\n    } // If there is a remaining pathname, treat the path separator as part of\n    // the remaining pathname for properly continuing the match.\n\n\n    remainingPathname = '/' + remainingPathname;\n  }\n\n  return {\n    remainingPathname: remainingPathname,\n    paramNames: paramNames,\n    paramValues: match.slice(1).map(function (v) {\n      return v && decodeURIComponent(v);\n    })\n  };\n}\n\nfunction getParamNames(pattern) {\n  return compilePattern(pattern).paramNames;\n}\n\nfunction getParams(pattern, pathname) {\n  var match = matchPattern(pattern, pathname);\n\n  if (!match) {\n    return null;\n  }\n\n  var paramNames = match.paramNames;\n  var paramValues = match.paramValues;\n  var params = {};\n  paramNames.forEach(function (paramName, index) {\n    params[paramName] = paramValues[index];\n  });\n  return params;\n}\n/**\n * Returns a version of the given pattern with params interpolated. Throws\n * if there is a dynamic segment of the pattern for which there is no param.\n */\n\n\nfunction formatPattern(pattern, params) {\n  params = params || {};\n\n  var _compilePattern3 = compilePattern(pattern);\n\n  var tokens = _compilePattern3.tokens;\n  var parenCount = 0,\n      pathname = '',\n      splatIndex = 0;\n  var token = void 0,\n      paramName = void 0,\n      paramValue = void 0;\n\n  for (var i = 0, len = tokens.length; i < len; ++i) {\n    token = tokens[i];\n\n    if (token === '*' || token === '**') {\n      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;\n      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path \"%s\"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;\n      if (paramValue != null) pathname += encodeURI(paramValue);\n    } else if (token === '(') {\n      parenCount += 1;\n    } else if (token === ')') {\n      parenCount -= 1;\n    } else if (token.charAt(0) === ':') {\n      paramName = token.substring(1);\n      paramValue = params[paramName];\n      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing \"%s\" parameter for path \"%s\"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;\n      if (paramValue != null) pathname += encodeURIComponent(paramValue);\n    } else {\n      pathname += token;\n    }\n  }\n\n  return pathname.replace(/\\/+/g, '/');\n}","map":{"version":3,"sources":["/Users/cclin/Documents/React/image-hosting-webapp/node_modules/react-router/lib/PatternUtils.js"],"names":["exports","__esModule","compilePattern","matchPattern","getParamNames","getParams","formatPattern","_invariant","require","_invariant2","_interopRequireDefault","obj","default","escapeRegExp","string","replace","_compilePattern","pattern","regexpSource","paramNames","tokens","match","lastIndex","matcher","exec","index","push","slice","length","CompiledPatternsCache","Object","create","pathname","charAt","_compilePattern2","RegExp","matchedPath","remainingPathname","substr","paramValues","map","v","decodeURIComponent","params","forEach","paramName","_compilePattern3","parenCount","splatIndex","token","paramValue","i","len","Array","isArray","splat","process","env","NODE_ENV","encodeURI","substring","encodeURIComponent"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.compilePattern = compilePattern;\nexports.matchPattern = matchPattern;\nexports.getParamNames = getParamNames;\nexports.getParams = getParams;\nexports.formatPattern = formatPattern;\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction _compilePattern(pattern) {\n  var regexpSource = '';\n  var paramNames = [];\n  var tokens = [];\n\n  var match = void 0,\n      lastIndex = 0,\n      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\\*\\*|\\*|\\(|\\)/g;\n  while (match = matcher.exec(pattern)) {\n    if (match.index !== lastIndex) {\n      tokens.push(pattern.slice(lastIndex, match.index));\n      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));\n    }\n\n    if (match[1]) {\n      regexpSource += '([^/]+)';\n      paramNames.push(match[1]);\n    } else if (match[0] === '**') {\n      regexpSource += '(.*)';\n      paramNames.push('splat');\n    } else if (match[0] === '*') {\n      regexpSource += '(.*?)';\n      paramNames.push('splat');\n    } else if (match[0] === '(') {\n      regexpSource += '(?:';\n    } else if (match[0] === ')') {\n      regexpSource += ')?';\n    }\n\n    tokens.push(match[0]);\n\n    lastIndex = matcher.lastIndex;\n  }\n\n  if (lastIndex !== pattern.length) {\n    tokens.push(pattern.slice(lastIndex, pattern.length));\n    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));\n  }\n\n  return {\n    pattern: pattern,\n    regexpSource: regexpSource,\n    paramNames: paramNames,\n    tokens: tokens\n  };\n}\n\nvar CompiledPatternsCache = Object.create(null);\n\nfunction compilePattern(pattern) {\n  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);\n\n  return CompiledPatternsCache[pattern];\n}\n\n/**\n * Attempts to match a pattern on the given pathname. Patterns may use\n * the following special characters:\n *\n * - :paramName     Matches a URL segment up to the next /, ?, or #. The\n *                  captured string is considered a \"param\"\n * - ()             Wraps a segment of the URL that is optional\n * - *              Consumes (non-greedy) all characters up to the next\n *                  character in the pattern, or to the end of the URL if\n *                  there is none\n * - **             Consumes (greedy) all characters up to the next character\n *                  in the pattern, or to the end of the URL if there is none\n *\n *  The function calls callback(error, matched) when finished.\n * The return value is an object with the following properties:\n *\n * - remainingPathname\n * - paramNames\n * - paramValues\n */\nfunction matchPattern(pattern, pathname) {\n  // Ensure pattern starts with leading slash for consistency with pathname.\n  if (pattern.charAt(0) !== '/') {\n    pattern = '/' + pattern;\n  }\n\n  var _compilePattern2 = compilePattern(pattern);\n\n  var regexpSource = _compilePattern2.regexpSource;\n  var paramNames = _compilePattern2.paramNames;\n  var tokens = _compilePattern2.tokens;\n\n\n  if (pattern.charAt(pattern.length - 1) !== '/') {\n    regexpSource += '/?'; // Allow optional path separator at end.\n  }\n\n  // Special-case patterns like '*' for catch-all routes.\n  if (tokens[tokens.length - 1] === '*') {\n    regexpSource += '$';\n  }\n\n  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));\n  if (match == null) {\n    return null;\n  }\n\n  var matchedPath = match[0];\n  var remainingPathname = pathname.substr(matchedPath.length);\n\n  if (remainingPathname) {\n    // Require that the match ends at a path separator, if we didn't match\n    // the full path, so any remaining pathname is a new path segment.\n    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {\n      return null;\n    }\n\n    // If there is a remaining pathname, treat the path separator as part of\n    // the remaining pathname for properly continuing the match.\n    remainingPathname = '/' + remainingPathname;\n  }\n\n  return {\n    remainingPathname: remainingPathname,\n    paramNames: paramNames,\n    paramValues: match.slice(1).map(function (v) {\n      return v && decodeURIComponent(v);\n    })\n  };\n}\n\nfunction getParamNames(pattern) {\n  return compilePattern(pattern).paramNames;\n}\n\nfunction getParams(pattern, pathname) {\n  var match = matchPattern(pattern, pathname);\n  if (!match) {\n    return null;\n  }\n\n  var paramNames = match.paramNames;\n  var paramValues = match.paramValues;\n\n  var params = {};\n\n  paramNames.forEach(function (paramName, index) {\n    params[paramName] = paramValues[index];\n  });\n\n  return params;\n}\n\n/**\n * Returns a version of the given pattern with params interpolated. Throws\n * if there is a dynamic segment of the pattern for which there is no param.\n */\nfunction formatPattern(pattern, params) {\n  params = params || {};\n\n  var _compilePattern3 = compilePattern(pattern);\n\n  var tokens = _compilePattern3.tokens;\n\n  var parenCount = 0,\n      pathname = '',\n      splatIndex = 0;\n\n  var token = void 0,\n      paramName = void 0,\n      paramValue = void 0;\n  for (var i = 0, len = tokens.length; i < len; ++i) {\n    token = tokens[i];\n\n    if (token === '*' || token === '**') {\n      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;\n\n      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path \"%s\"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;\n\n      if (paramValue != null) pathname += encodeURI(paramValue);\n    } else if (token === '(') {\n      parenCount += 1;\n    } else if (token === ')') {\n      parenCount -= 1;\n    } else if (token.charAt(0) === ':') {\n      paramName = token.substring(1);\n      paramValue = params[paramName];\n\n      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing \"%s\" parameter for path \"%s\"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;\n\n      if (paramValue != null) pathname += encodeURIComponent(paramValue);\n    } else {\n      pathname += token;\n    }\n  }\n\n  return pathname.replace(/\\/+/g, '/');\n}"]},"metadata":{},"sourceType":"script"}